var P=t=>{throw TypeError(t)};var q=(t,e,s)=>e.has(t)||P("Cannot "+s);var i=(t,e,s)=>(q(t,e,"read from private field"),s?s.call(t):e.get(t)),c=(t,e,s)=>e.has(t)?P("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(t):e.set(t,s),u=(t,e,s,r)=>(q(t,e,"write to private field"),r?r.call(t,s):e.set(t,s),s);var D=(t,e,s,r)=>({set _(a){u(t,e,a,s)},get _(){return i(t,e,r)}});import{j as M}from"./jsx-runtime-DR9Q75dM.js";import{a as $}from"./index.esm-zFJIz-4f.js";import{c as U,R as z}from"./index-x70cJmE6.js";import{S as K,h as k,b as o,m as C,M as G,j as E,n as f,k as J,o as x,l as H,p as L,q as F,u as I,s as V,Q as W}from"./QueryClientProvider-BdRu95_o.js";import{Q as X,i as R}from"./infiniteQueryBehavior-DdhmIwcw.js";import"./index-DRjF_FHU.js";import"./index-BXCeiWJk.js";var d,j,Y=(j=class extends K{constructor(e={}){super();c(this,d);this.config=e,u(this,d,new Map)}build(e,s,r){const a=s.queryKey,l=s.queryHash??k(a,s);let g=this.get(l);return g||(g=new X({cache:this,queryKey:a,queryHash:l,options:e.defaultQueryOptions(s),state:r,defaultOptions:e.getQueryDefaults(a)}),this.add(g)),g}add(e){i(this,d).has(e.queryHash)||(i(this,d).set(e.queryHash,e),this.notify({type:"added",query:e}))}remove(e){const s=i(this,d).get(e.queryHash);s&&(e.destroy(),s===e&&i(this,d).delete(e.queryHash),this.notify({type:"removed",query:e}))}clear(){o.batch(()=>{this.getAll().forEach(e=>{this.remove(e)})})}get(e){return i(this,d).get(e)}getAll(){return[...i(this,d).values()]}find(e){const s={exact:!0,...e};return this.getAll().find(r=>C(s,r))}findAll(e={}){const s=this.getAll();return Object.keys(e).length>0?s.filter(r=>C(e,r)):s}notify(e){o.batch(()=>{this.listeners.forEach(s=>{s(e)})})}onFocus(){o.batch(()=>{this.getAll().forEach(e=>{e.onFocus()})})}onOnline(){o.batch(()=>{this.getAll().forEach(e=>{e.onOnline()})})}},d=new WeakMap,j),h,w,S,Z=(S=class extends K{constructor(e={}){super();c(this,h);c(this,w);this.config=e,u(this,h,new Map),u(this,w,Date.now())}build(e,s,r){const a=new G({mutationCache:this,mutationId:++D(this,w)._,options:e.defaultMutationOptions(s),state:r});return this.add(a),a}add(e){const s=A(e),r=i(this,h).get(s)??[];r.push(e),i(this,h).set(s,r),this.notify({type:"added",mutation:e})}remove(e){var r;const s=A(e);if(i(this,h).has(s)){const a=(r=i(this,h).get(s))==null?void 0:r.filter(l=>l!==e);a&&(a.length===0?i(this,h).delete(s):i(this,h).set(s,a))}this.notify({type:"removed",mutation:e})}canRun(e){var r;const s=(r=i(this,h).get(A(e)))==null?void 0:r.find(a=>a.state.status==="pending");return!s||s===e}runNext(e){var r;const s=(r=i(this,h).get(A(e)))==null?void 0:r.find(a=>a!==e&&a.state.isPaused);return(s==null?void 0:s.continue())??Promise.resolve()}clear(){o.batch(()=>{this.getAll().forEach(e=>{this.remove(e)})})}getAll(){return[...i(this,h).values()].flat()}find(e){const s={exact:!0,...e};return this.getAll().find(r=>E(s,r))}findAll(e={}){return this.getAll().filter(s=>E(e,s))}notify(e){o.batch(()=>{this.listeners.forEach(s=>{s(e)})})}resumePausedMutations(){const e=this.getAll().filter(s=>s.state.isPaused);return o.batch(()=>Promise.all(e.map(s=>s.continue().catch(f))))}},h=new WeakMap,w=new WeakMap,S);function A(t){var e;return((e=t.options.scope)==null?void 0:e.id)??String(t.mutationId)}var n,y,m,Q,v,p,b,O,_,ee=(_=class{constructor(t={}){c(this,n);c(this,y);c(this,m);c(this,Q);c(this,v);c(this,p);c(this,b);c(this,O);u(this,n,t.queryCache||new Y),u(this,y,t.mutationCache||new Z),u(this,m,t.defaultOptions||{}),u(this,Q,new Map),u(this,v,new Map),u(this,p,0)}mount(){D(this,p)._++,i(this,p)===1&&(u(this,b,J.subscribe(async t=>{t&&(await this.resumePausedMutations(),i(this,n).onFocus())})),u(this,O,x.subscribe(async t=>{t&&(await this.resumePausedMutations(),i(this,n).onOnline())})))}unmount(){var t,e;D(this,p)._--,i(this,p)===0&&((t=i(this,b))==null||t.call(this),u(this,b,void 0),(e=i(this,O))==null||e.call(this),u(this,O,void 0))}isFetching(t){return i(this,n).findAll({...t,fetchStatus:"fetching"}).length}isMutating(t){return i(this,y).findAll({...t,status:"pending"}).length}getQueryData(t){var s;const e=this.defaultQueryOptions({queryKey:t});return(s=i(this,n).get(e.queryHash))==null?void 0:s.state.data}ensureQueryData(t){const e=this.getQueryData(t.queryKey);if(e===void 0)return this.fetchQuery(t);{const s=this.defaultQueryOptions(t),r=i(this,n).build(this,s);return t.revalidateIfStale&&r.isStaleByTime(H(s.staleTime,r))&&this.prefetchQuery(s),Promise.resolve(e)}}getQueriesData(t){return i(this,n).findAll(t).map(({queryKey:e,state:s})=>{const r=s.data;return[e,r]})}setQueryData(t,e,s){const r=this.defaultQueryOptions({queryKey:t}),a=i(this,n).get(r.queryHash),l=a==null?void 0:a.state.data,g=L(e,l);if(g!==void 0)return i(this,n).build(this,r).setData(g,{...s,manual:!0})}setQueriesData(t,e,s){return o.batch(()=>i(this,n).findAll(t).map(({queryKey:r})=>[r,this.setQueryData(r,e,s)]))}getQueryState(t){var s;const e=this.defaultQueryOptions({queryKey:t});return(s=i(this,n).get(e.queryHash))==null?void 0:s.state}removeQueries(t){const e=i(this,n);o.batch(()=>{e.findAll(t).forEach(s=>{e.remove(s)})})}resetQueries(t,e){const s=i(this,n),r={type:"active",...t};return o.batch(()=>(s.findAll(t).forEach(a=>{a.reset()}),this.refetchQueries(r,e)))}cancelQueries(t={},e={}){const s={revert:!0,...e},r=o.batch(()=>i(this,n).findAll(t).map(a=>a.cancel(s)));return Promise.all(r).then(f).catch(f)}invalidateQueries(t={},e={}){return o.batch(()=>{if(i(this,n).findAll(t).forEach(r=>{r.invalidate()}),t.refetchType==="none")return Promise.resolve();const s={...t,type:t.refetchType??t.type??"active"};return this.refetchQueries(s,e)})}refetchQueries(t={},e){const s={...e,cancelRefetch:(e==null?void 0:e.cancelRefetch)??!0},r=o.batch(()=>i(this,n).findAll(t).filter(a=>!a.isDisabled()).map(a=>{let l=a.fetch(void 0,s);return s.throwOnError||(l=l.catch(f)),a.state.fetchStatus==="paused"?Promise.resolve():l}));return Promise.all(r).then(f)}fetchQuery(t){const e=this.defaultQueryOptions(t);e.retry===void 0&&(e.retry=!1);const s=i(this,n).build(this,e);return s.isStaleByTime(H(e.staleTime,s))?s.fetch(e):Promise.resolve(s.state.data)}prefetchQuery(t){return this.fetchQuery(t).then(f).catch(f)}fetchInfiniteQuery(t){return t.behavior=R(t.pages),this.fetchQuery(t)}prefetchInfiniteQuery(t){return this.fetchInfiniteQuery(t).then(f).catch(f)}ensureInfiniteQueryData(t){return t.behavior=R(t.pages),this.ensureQueryData(t)}resumePausedMutations(){return x.isOnline()?i(this,y).resumePausedMutations():Promise.resolve()}getQueryCache(){return i(this,n)}getMutationCache(){return i(this,y)}getDefaultOptions(){return i(this,m)}setDefaultOptions(t){u(this,m,t)}setQueryDefaults(t,e){i(this,Q).set(F(t),{queryKey:t,defaultOptions:e})}getQueryDefaults(t){const e=[...i(this,Q).values()];let s={};return e.forEach(r=>{I(t,r.queryKey)&&(s={...s,...r.defaultOptions})}),s}setMutationDefaults(t,e){i(this,v).set(F(t),{mutationKey:t,defaultOptions:e})}getMutationDefaults(t){const e=[...i(this,v).values()];let s={};return e.forEach(r=>{I(t,r.mutationKey)&&(s={...s,...r.defaultOptions})}),s}defaultQueryOptions(t){if(t._defaulted)return t;const e={...i(this,m).queries,...this.getQueryDefaults(t.queryKey),...t,_defaulted:!0};return e.queryHash||(e.queryHash=k(e.queryKey,e)),e.refetchOnReconnect===void 0&&(e.refetchOnReconnect=e.networkMode!=="always"),e.throwOnError===void 0&&(e.throwOnError=!!e.suspense),!e.networkMode&&e.persister&&(e.networkMode="offlineFirst"),e.enabled!==!0&&e.queryFn===V&&(e.enabled=!1),e}defaultMutationOptions(t){return t!=null&&t._defaulted?t:{...i(this,m).mutations,...(t==null?void 0:t.mutationKey)&&this.getMutationDefaults(t.mutationKey),...t,_defaulted:!0}}clear(){i(this,n).clear(),i(this,y).clear()}},n=new WeakMap,y=new WeakMap,m=new WeakMap,Q=new WeakMap,v=new WeakMap,p=new WeakMap,b=new WeakMap,O=new WeakMap,_);const T=t=>M.jsx($,{children:M.jsx(t,{})});T.__docgenInfo={description:"",methods:[],displayName:"withHelmetProvider"};const B=t=>{const s=U([{path:"/",element:M.jsx(t,{})}]);return M.jsx(z,{router:s})};B.__docgenInfo={description:"",methods:[],displayName:"withMemoryRouter"};const te=new ee,N=t=>M.jsx(W,{client:te,children:M.jsx(t,{})});N.__docgenInfo={description:"",methods:[],displayName:"withQueryClient"};const ce={parameters:{controls:{matchers:{color:/(background|color)$/i,date:/Date$/i}}},decorators:[N,B,T]};export{ce as default};
